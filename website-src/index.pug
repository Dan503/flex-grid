include modules/demo/demo

doctype html
// The Time Machine GitHub pages theme was designed and developed by Jon Rohan, on Feb 7, 2012.
// Follow him for fun. http://twitter.com/jonrohan. Tail his code on https://github.com/jonrohan
html
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge,chrome=1')
    link(rel='stylesheet', href='stylesheets/stylesheet.css', media='screen')
    link(rel='stylesheet', href='stylesheets/github-dark.css')
    link(rel='stylesheet', href='stylesheets/custom-styles.css')
    script(type='text/javascript', src='javascripts/modernizr.min.js')
    title flexible-grid
    meta(name='description', content='A grid system that uses flexbox with display:table and float:left backups')
    meta(name='viewport', content='width=device-width,initial-scale=1')
  body
    .wrapper
      header
        h1.title flexible-grid
      #container
        p.tagline A grid system that uses flexbox with display:table and float:left backups
        #main(role='main')
          .download-bar
            .inner
              a.download-button.tar(href='https://github.com/Dan503/flexible-grid/tarball/master')
                span Download
              a.download-button.zip(href='https://github.com/Dan503/flexible-grid/zipball/master')
                span Download
              a.code(href='https://github.com/Dan503/flexible-grid') View flexible-grid on GitHub
            span.blc
            span.trc
          article.markdown-body
            :marked
              ## Installation

              ```````
              npm install flexible-grid --save
              ```````

              Flexible-grid is dependent on [Modernizr](https://modernizr.com/) being a part of your build process. The particular Modernizr property it is dependent on is `flex-wrap`. To add Modernizr to your site, either [download a custom build that includes flex-wrap](https://modernizr.com/download?setclasses&q=flex-wrap) from the modernizr website and link to it in the HTML of your website, or you can incorporate [Customizr](https://www.npmjs.com/package/customizr) into your website compilation process. I recommend taking the second option.

              Another Dependency that Flexible-grid has is mq-scss. This is used for the media queries. After npm installing Flexible-grid, add this to the top of your main Sass file:

              `````scss
              @import '../node_modules/mq-scss/mq';
              @import '../node_modules/flexible-grid/grid';
              `````

              Things to note:

              - mq-scss will automatically install when installing flexible-grid
              - I've purposly not put the mq-scss include in the grid Sass file so that users will more likely see that mq-scss is available for them to use
              - Make sure that the import paths are actually correct. They will differ depending on your folder structure.

              ## Basic usage

              The `grid` class initiallizes the grid frunctionality. The `grid__cell` classes are needed for compatibility with older browsers and they are also needed for some pf the more advanced functionality in the grid system

            +demo({
html:`
.grid
  .grid__cell.-color-1
  .grid__cell.-color-2`,
})
              :marked
                The bare bones markup of what you need for flexible-grid to work (excluding color classes)

            :marked
              That example is a bit misleading though. Having 2 grid cells doesn't mean they will be 50% width each

            +demo({
html:`
.grid
  .grid__cell.-color-1
    | lots and lots and lots of text in this cell.
    | Lorem ipsum dolor sit amet, consectetur adipiscing elit. Bonum incolumis acies: misera caecitas.
    | Cur, nisi quod turpis oratio est? Atque haec coniunctio confusioque virtutum tamen a philosophis ratione quadam distinguitur.
    | At ille pellit, qui permulcet sensum voluptate. Videamus igitur sententias eorum, tum ad verba redeamus.
    | Duo Reges: constructio interrete. Quantum Aristoxeni ingenium consumptum videmus in musicis.
  .grid__cell.-color-2
    | Barely any text in this cell`,
})
              :marked
                The previous example, but one cell has a lot of text while the other barely has any

            :marked
              ### Using columns

              To ensure that cells take up only 50% width each, add a `grid--cols-2` class to the same div as the `grid` element.

            +demo({
html:`
.grid.grid--cols-2
  .grid__cell.-color-1
    | lots and lots and lots of text in this cell.
    | Lorem ipsum dolor sit amet, consectetur adipiscing elit. Bonum incolumis acies: misera caecitas.
    | Cur, nisi quod turpis oratio est? Atque haec coniunctio confusioque virtutum tamen a philosophis ratione quadam distinguitur.
    | At ille pellit, qui permulcet sensum voluptate. Videamus igitur sententias eorum, tum ad verba redeamus.
    | Duo Reges: constructio interrete. Quantum Aristoxeni ingenium consumptum videmus in musicis.
  .grid__cell.-color-2
    | Barely any text in this cell`,
})
              :marked
                The previous example but adding the `grid--cols-2` class

            :marked
              The added bonus of using column classes is that there are baked in media queries for typical break points. This lets you build your site layout and not have to worry as much about making it mobile friendly.

            +demo({
html:`
.grid.grid--cols-2
  .grid__cell.-color-1
  .grid__cell.-color-2`
})
              :marked
                Examples of all the default column widths. Resize your browser to watch the media queries take effect.

            +demo({
html:`
.grid.grid--cols-3
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
`
})
            +demo({
html:`
.grid.grid--cols-4
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
`
})
            +demo({
html:`
.grid.grid--cols-5
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
`
})
            +demo({
html:`
.grid.grid--cols-6
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
  .grid__cell.-color-6
`
})
            :marked
              ### Customising the columns

              If you don't like the default breakpoints or you need more columns, you can easily edit them by altering the `$grid-break-points` variable.

            +demo({
scss:`
$grid-break-points: (
  (
  //*1 column grid*/
  // no media query
    false
  ), (
  //*2 column grid*/
  //* From 600px screen size and below, make the columns 100% width */
    600px 100%,
  ), (
  //*3 column grid*/
    600px 100%,
  ), (
  //*4 column grid*/
    960px 50%,
    480px 100%,
  ), (
  //*5 column grid*/
    960px 33.33%,
    600px 50%,
    480px 100%,
  ), (
  //*6 column grid*/
    960px 33.33%,
    600px 50%,
    480px 100%,
  )
);

@import '../node_modules/mq-scss/mq';
@import '../node_modules/flexible-grid/grid';`
})
              :marked
                These are the default settings. Edit them by placing a `$grid-break-points` variable before the import statements.

            +demo({
scss:`
//Disable all breakpoints
$grid-break-points: false;

@import '../node_modules/mq-scss/mq';
@import '../node_modules/flexible-grid/grid';`
})
              :marked
                You can disable all break points by setting `$grid-break-points` to false. This will allow you to have up to 6 columns.

            :marked
              ## Enable wrapping

              Wrapping isn't enabled by default on desktop sized screens mostly for the sake of legacy browser compatibility. To enable wrapping on desktop, a `grid--wrap` class needs to be added. Without the class, if there are too many grid cells for the number of columns, it will squeeze them together instead of wrapping them.

            +demo({
html:`
.grid.grid--cols-3
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
  .grid__cell.-color-6
`})
              :marked
                6 cells in a 3 column grid with grid--wrap **not enabled**

            +demo({
html:`
.grid.grid--cols-3.grid--wrap
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
  .grid__cell.-color-6
`})
              :marked
                6 cells in a 3 column grid with grid--wrap **enabled**

            :marked
              When the browser reaches a certain screen size, wrapping becomes enabled by default so that the content in the grid is able to adapt to the smaller screen sizes. The setting that determines at what point `grid--wrap` enables itself is `$grid-page-width`. It is named "page-width" since it is meant to be the screen width at which the edge of the desktop design meets the edge of the screen.

            +demo({
scss:`
//This is the default setting
$grid-page-width: 1200px;

@import '../node_modules/mq-scss/mq';
@import '../node_modules/flexible-grid/grid';`
})
              :marked
                Alter the screen size that grid wrapping becomes enabled by default at

            :marked
              To just outright disable grid wrapping for all screen sizes (useful for very small instances of the grid system being used), use the `grid--noWrap` class.

            +demo({
html:`
.grid.grid--cols-6.grid--noWrap
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
  .grid__cell.-color-6
`})
              :marked
                Disable grid wrapping at all screen sizes (resize browser window to see the effect)

            :marked
              ## Adding Gutters

              One of the hardest things to do well in css that is very common in web design is when you have multiple columns on multiple rows with gutters inbetween each item but the content in the outer columns need to line up with the edges of the other content on the page.

              This is easily achieved using flexible-grid though.

            +demo({
html:`
.grid__wrapper
  .grid.grid--cols-3.grid--wrap.grid--gutter-moduleName
    .grid__cell.-color-1
    .grid__cell.-color-2
    .grid__cell.-color-3
    .grid__cell.-color-4
    .grid__cell.-color-5
    .grid__cell.-color-6
`,
scss:`
//Define gutter sizes like this
$grid-cell-gutters: (
  'moduleName' : 20px,
);

@import '../node_modules/mq-scss/mq';
@import '../node_modules/flexible-grid/grid';`
})
              :marked
                Defining a gutter size

            :marked
              The `grid__wrapper` element is to help contain the grid inside it's bounding box when gutters are applied to it. It isn't always necessary but it is often needed for the grid to behave as expected.

              Anyway, that is how to create a fixed gutter that is the same width for all screen sizes, but what if you have a very thick gutter on desktop? It won't work well having an 80px wide gutter on a tablet or mobile device, it would take up too much screen realestate. The solution is gutters that contain media queries. Here is how to do them:

            +demo({
html:`
.grid__wrapper
  .grid.grid--gutter-mediaQueryGutter.grid--cols-3.grid--wrap
    .grid__cell.-color-1
    .grid__cell.-color-2
    .grid__cell.-color-3
    .grid__cell.-color-4
    .grid__cell.-color-5
    .grid__cell.-color-6
`,
scss:`
//Define gutter sizes like this
$grid-cell-gutters: (
  'basicGutter' : 20px,
  'mediaQueryGutter' : (
    80px, //*default gutter width*/
    25px (max, 960px), //*gutter width at 960px and below*/
    10px (max, 600px) //*gutter width at 600px and below*/
  )
);

@import '../node_modules/mq-scss/mq';
@import '../node_modules/flexible-grid/grid';`
})
            :marked
              Applying gutters that are affected by media queries

          :marked
            Unlike a basic gutter which is just a single pixel value, a media query gutter is a list of pixel values with an optional media query attached to them. The media queries are not written in the standard css media query syntax though. They are written in the mq-scss mixin syntax. To learn more about how to write media queries using the mq-scss syntax, see the [mq-scss documentation](https://www.npmjs.com/package/mq-scss).

      footer
        .owner
          p
            a.avatar(href='https://github.com/Dan503')
              img(src='https://s.gravatar.com/avatar/9da9f1df8def9d7b554fa7e03307a7b2?size=50&default=retro', width='48', height='48')
            | #[a(href='https://github.com/Dan503') Dan503] maintains #[a(href='https://github.com/Dan503/flexible-grid') flexible-grid]

        .creds
          small
            | theme by #[a(href='https://twitter.com/jonrohan/') Jon Rohan]
    .current-section
      a(href='#top') Scroll to top
      a.tar(href='https://github.com/Dan503/flexible-grid/tarball/master') tar
      a.zip(href='https://github.com/Dan503/flexible-grid/zipball/master') zip
      a.code(href='') source code
      p.name

    link(rel='stylesheet', href='/stylesheets/highlight.theme.atom-one-dark.css')
    script(type='text/javascript', src='javascripts/highlight.pack.js')
    script(type='text/javascript').
      hljs.initHighlightingOnLoad();
    script(type='text/javascript', src='https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js')
    script(type='text/javascript', src='javascripts/script.js')

block content
  :marked
    If using the class based system, cells can be made to take up more than just a single column width by using a `grid__cell--span-#` class. The `#` being the number of columns you wish for the cell to span.

    Alternatively, if you are using the mixin based system, you can use the seperate `grid__cell--span` mixin to calculate the width for you. The syntax for it goes like this:

    ``````scss
    @include grid__cell--span(
      [No. columns to span],
      [total No. of columns],
      [optional place to add "!important" if you need it]
    );
    ``````

    The first 2 parameters are required but the 3rd parameter is a completly optional parameter designed to add "!important" to the rule if you need to. The only think this mixin does is calculate the width for you so it's perfectly fine to write out the width manually if that's easier.

  +demo({
    classes: {
html:`
.grid.grid--cols-4.grid--wrap
  .grid__cell.grid__cell--span-3.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
  .grid__cell.-color-6
`
    },
    mixin: {
html:`
.mixin-10
  .mixin__cell.mixin__cellSpan.-color-1
  .mixin__cell.-color-2
  .mixin__cell.-color-3
  .mixin__cell.-color-4
  .mixin__cell.-color-5
  .mixin__cell.-color-6
`,
scss:`
.mixin-10 {
  @include grid(4, $wrap: true);
}

.mixin__cellSpan {
  //You can use the mixin to do the math for you
  @include grid__cell--span(3, 4);

  //or you can just do the math yourself
  width: 75%;
}`,
    }
})

  :marked
    Grids that feature column spans often don't play nicely with the default media queries though. To work around this, it's usually best to simply disable the media queries on that particular grid and write your own custom styles with new media queries. To disable media queries on a grid, add the `grid--noMQs` class if using the class based system. If using the mixin, set the `$MQs` variable to `false`. Alternatively you may like to use the `$breakpoints` setting to [create new breakpoints](/pages/04-using-columns/#mixin-column-breakpoints) for the module instead, you will still likely need to style the cell that has column span specifically though.

  +demo({
    classes: {
html:`
.grid.grid--noMQs.grid--cols-4.grid--wrap
  .grid__cell.grid__cell--span-3.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
  .grid__cell.-color-6
`
    },
    mixin: {
html:`
.mixin-11
  .mixin__cell.mixin__cellSpan.-color-1
  .mixin__cell.-color-2
  .mixin__cell.-color-3
  .mixin__cell.-color-4
  .mixin__cell.-color-5
  .mixin__cell.-color-6
`,
scss:`
.mixin__cellSpan {
  @include grid__cell--span(3, 4);
}
.mixin-11 {
  @include grid(4, $MQs: false, $wrap: true);
}

`,
    }
})
    :marked
      Same example as above except this time with the default media queries disabled. Resize your screen to see the difference.

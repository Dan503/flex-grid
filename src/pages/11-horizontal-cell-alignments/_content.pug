block content
  :marked
    Horizontal cell alignment is easy with Gutter Grid. These are mostly just classes that hold `align-items` values but they _do_ feature legacy browser backups so it's better to use these than the `align-items` property directly. In old browsers, the `space` settings are outputted as center alignments instead.

    By default, if there are not enough cells in the row to fill the specified number of columns, the cells will grow like this:

  +demo({
    classes: {
html:`
.grid.grid--cols-3.grid--wrap
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
`
    },

    mixin: {
html:`
.mixin-26
  .mixin__cell.-color-1
  .mixin__cell.-color-2
  .mixin__cell.-color-3
  .mixin__cell.-color-4
  .mixin__cell.-color-5
`,
scss:`
.mixin-26 {
  @include grid(3, $wrap: true);
}
`,
    }
})
    :marked
      Default cell alignment when there are not enough cells to fill the row

  :marked
    If this isn't the effect you are after, you might want to use some of these other alignment options

  +demo({
    classes: {
html:`
.grid.grid--align-left.grid--cols-3.grid--wrap
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
`
    },

    mixin: {
html:`
.mixin-27
  .mixin__cell.-color-1
  .mixin__cell.-color-2
  .mixin__cell.-color-3
  .mixin__cell.-color-4
  .mixin__cell.-color-5
`,
scss:`
.mixin-27 {
  @include grid(3, $align: left, $wrap: true);
}
`,
    }
})
    :marked
      Alternate cell alignment options

  +demo({
    classes: {
html:`
.grid.grid--align-right.grid--cols-3.grid--wrap
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
`
    },

    mixin: {
html:`
.mixin-28
  .mixin__cell.-color-1
  .mixin__cell.-color-2
  .mixin__cell.-color-3
  .mixin__cell.-color-4
  .mixin__cell.-color-5
`,
scss:`
.mixin-28 {
  @include grid(3, $align: right, $wrap: true);
}
`,
    }
})

  +demo({
    classes: {
html:`
.grid.grid--align-center.grid--cols-3.grid--wrap
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
`
    },

    mixin: {
html:`
.mixin-29
  .mixin__cell.-color-1
  .mixin__cell.-color-2
  .mixin__cell.-color-3
  .mixin__cell.-color-4
  .mixin__cell.-color-5
`,
scss:`
.mixin-29 {
  @include grid(3, $align: center, $wrap: true);
}
`,
    }
})

  +demo({
    classes: {
html:`
.grid.grid--space-between.grid--cols-3.grid--wrap
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
`
    },

    mixin: {
html:`
.mixin-30
  .mixin__cell.-color-1
  .mixin__cell.-color-2
  .mixin__cell.-color-3
  .mixin__cell.-color-4
  .mixin__cell.-color-5
`,
scss:`
.mixin-30 {
  @include grid(3, $space: between, $wrap: true);
}
`,
    }
})

  +demo({
    classes: {
html:`
.grid.grid--space-around.grid--cols-3.grid--wrap
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
`
    },

    mixin: {
html:`
.mixin-31
  .mixin__cell.-color-1
  .mixin__cell.-color-2
  .mixin__cell.-color-3
  .mixin__cell.-color-4
  .mixin__cell.-color-5
`,
scss:`
.mixin-31 {
  @include grid(3, $space: around, $wrap: true);
}
`,
    }
})

  :marked
    Of coarse, you can use alignment in more circumstances than just how the grid handles not having enough cells to fill a row. A good example is pagination that uses `grid--space-around` to space out the pagination cells:

  +demo({
    classes: {
html:`
ol.grid.grid--space-around.grid--hasInners.add-border.add-padding.TK-noDots
  - var i = 0
  while i < 5
    li.grid__cell
      a.grid__inner.add-shadow.add-padding= i + 1
    - i++;
`
    },

    mixin: {
html:`
ol.mixin-32.add-border.add-padding.TK-noDots
  - var i = 0
  while i < 5
    li.mixin__cell
      a.mixin__inner.add-shadow.add-padding= i + 1
    - i++;
`,
scss:`
.mixin-32 {
  @include grid($space: around, $inners: true);
}
`,
    }
}, {classes: '-noHeight'})

  +demo({
    classes: {
html:`
.grid__wrapper.add-border
  .grid.grid--vertical.grid--gutter-moduleName
    .grid__cell.-color-1
    .grid__cell.-color-2
    .grid__cell.-color-3
`
    },

    mixin: {
html:`
.mixin__wrapper.add-border
  .mixin-33
    .mixin__cell.-color-1
    .mixin__cell.-color-2
    .mixin__cell.-color-3
`,
scss:`
.mixin-33 {
  @include grid($vertical: true, $gutter: 20px);
}
`,
    }
})

  :marked
    Applying `grid--vertical` (`$vertical: true` in the mixin) is simply adding `flex-direction: column`. This flips the grid around so that grid cells progressivly move down the page instead of across.

    Using the `vertical` setting features a backup for legacy browsers though whereas applying `flex-direction: column` on it's own does not.

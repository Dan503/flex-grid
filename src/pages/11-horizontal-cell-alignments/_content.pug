block content
  :marked
    Horizontal cell alignment is easy with Gutter Grid. These are mostly just classes that hold `justify-content` values but they *do* feature legacy browser backups so it's better to use these than the `justify-content` property directly if legacy support is important to you. In old browsers, the `space` settings are outputted as center alignments instead. It's impossible to replicate the flexbox `space` alignments in browsers that don't support flexbox.

    By default, if there are not enough cells in the row to fill the specified number of columns, the cells will align to the left similar to how CSS Grid behaves. This default functionality was introduced in version 4 to better align with how CSS Grid works. In version 3, the left over grid cells would grow to fill the remaining space left over in the grid by default. To replicate the version 4 default functionality in version 3, use `$align: left` or the `grid--align-left` class.

  +demo({
    classes: {
html:`
.grid.grid--cols-3
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
`
    },

    mixin: {
html:`
.mixin-26
  .mixin__cell.-color-1
  .mixin__cell.-color-2
  .mixin__cell.-color-3
  .mixin__cell.-color-4
  .mixin__cell.-color-5
`,
scss:`
.mixin-26 {
  @include grid(3);
}
`,
    }
})
    :marked
      Default cell alignment when there are not enough cells to fill the row

  :marked
    If this isn't the effect you are after, you might want to use some of these other alignment options

  +demo({
    classes: {
html:`
.grid.grid--stretch.grid--cols-3
  .grid__cell.-color-1
  .grid__cell.-color-2
  .grid__cell.-color-3
  .grid__cell.-color-4
  .grid__cell.-color-5
`
    },

    mixin: {
html:`
.mixin-27
  .mixin__cell.-color-1
  .mixin__cell.-color-2
  .mixin__cell.-color-3
  .mixin__cell.-color-4
  .mixin__cell.-color-5
`,
scss:`
.mixin-27 {
  @include grid(3, $stretch: true);
}
`,
    }
})
    :marked
      Stretch the grid cells to fill remaining space (this is the default functionality in version 3)

  +demo({
    classes: {
html:`
figure
  figcaption Align right
  .grid.grid--align-right.grid--cols-3
    .grid__cell.-color-1
    .grid__cell.-color-2
    .grid__cell.-color-3
    .grid__cell.-color-4
    .grid__cell.-color-5
figure
  figcaption Align center
  .grid.grid--align-center.grid--cols-3
    .grid__cell.-color-1
    .grid__cell.-color-2
    .grid__cell.-color-3
    .grid__cell.-color-4
    .grid__cell.-color-5
figure
  figcaption Space between
  .grid.grid--space-between.grid--cols-3
    .grid__cell.-color-1
    .grid__cell.-color-2
    .grid__cell.-color-3
    .grid__cell.-color-4
    .grid__cell.-color-5
figure
  figcaption Space around
  .grid.grid--space-around.grid--cols-3
    .grid__cell.-color-1
    .grid__cell.-color-2
    .grid__cell.-color-3
    .grid__cell.-color-4
    .grid__cell.-color-5
`
    },

    mixin: {
html:`
figure
  figcaption Align right
  .mixin-28
    .mixin__cell.-color-1
    .mixin__cell.-color-2
    .mixin__cell.-color-3
    .mixin__cell.-color-4
    .mixin__cell.-color-5
figure
  figcaption Align center
  .mixin-29
    .mixin__cell.-color-1
    .mixin__cell.-color-2
    .mixin__cell.-color-3
    .mixin__cell.-color-4
    .mixin__cell.-color-5
figure
  figcaption Space between
  .mixin-30
    .mixin__cell.-color-1
    .mixin__cell.-color-2
    .mixin__cell.-color-3
    .mixin__cell.-color-4
    .mixin__cell.-color-5
figure
  figcaption Space around
  .mixin-31
    .mixin__cell.-color-1
    .mixin__cell.-color-2
    .mixin__cell.-color-3
    .mixin__cell.-color-4
    .mixin__cell.-color-5
`,
scss:`
.mixin-28 {
  @include grid(3, $align: right);
}
.mixin-29 {
  @include grid(3, $align: center);
}
.mixin-30 {
  @include grid(3, $space: between);
}
.mixin-31 {
  @include grid(3, $space: around);
}

`,
    }
})
    :marked
      Other alignment options

  :marked
    Of coarse, you can use alignment in more circumstances than just how the grid handles not having enough cells to fill a row. A good example is pagination that uses `grid--space-around` to space out the pagination cells:

  +demo({
    classes: {
html:`
ol.grid.grid--space-around.grid--hasInners.add-padding.TK-noDots
  - var i = 0
  while i < 5
    li.grid__cell
      a.grid__inner.add-shadow.add-padding(href="#")= i + 1
    - i++;
`
    },

    mixin: {
html:`
ol.mixin-32.add-padding.TK-noDots
  - var i = 0
  while i < 5
    li.mixin__cell
      a.mixin__inner.add-shadow.add-padding(href="#")= i + 1
    - i++;
`,
scss:`
.mixin-32 {
  @include grid($space: around, $inners: true);
}
`,
    }
}, {classes: '-noHeight'})

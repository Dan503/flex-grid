///////////////////////////////////
/*   SHARED ANIMATION EFFECTS   */
/////////////////////////////////


/*******************************************\
	RUMBLE EFFECT
---------------------------------------------
	Element jitteres from side to side
\*******************************************/

@function rumble_generator($rotation){
	@return
		(rotate: 0deg),
		(rotate: -$rotation),
		(rotate: $rotation),
		(rotate: -$rotation),
		(rotate: 0deg),
		(rotate: 0deg)
	;
}

$rumble:rumble_generator(5deg);

@include kf-definition( rumble, $rumble );

//////////////// Use the following //////////////////////////

//Mixin for custom functionality

//eg. @include MG-rumble(animation_name, 2); would rumble the element 2 degrees either side
//if changing rotation distance, unique animation name is required

@mixin MG-rumble($name: rumble, $rotation: 5deg, $settings: 0.5s, $loops:infinite){
	@if ($name == rumble){
		@include kf-predefined(rumble, $settings, $loops);
	} @else {
		@include kf-animate($name, kf_generator(rumble_generator($rotation)), $settings, $loops);
	}
}

/*******************************************\
	SPIN EFFECT
---------------------------------------------
	Element spins around in one spot
\*******************************************/
$spin--clockwise:
	(rotate: 0),
	(rotate: 360deg)
;
$spin--anticlockwise:
	(rotate: 360deg),
	(rotate: 0)
;

@include kf-definition(spin--clockwise, $spin--clockwise);
@include kf-definition(spin--anticlockwise, $spin--anticlockwise);


//////////////// Use the following //////////////////////////

//mixin for custom functionality (changes how fast it spins)
@mixin MG-spin($direction: clockwise, $settings: 1s, $loops: infinite){
	@include kf-predefined(spin--#{$direction},$settings, $loops, linear);
}


/*******************************************\
	POP IN EFFECT
---------------------------------------------
	Element starts off hidden, then quickly
	grows large, then snaps to normal size
	(requires element to start at opacity:0)
\*******************************************/

@function popin_generator($scale){
	@return
		0% (scale: 0, opacity: 0),
		70% (scale: $scale, opacity: 1),
		100% (scale: 1, opacity: 1)
	;
}

$popin: popin_generator(1.2);
@include kf-definition(popin,$popin);

//////////////// Use the following //////////////////////////

//mixin for custom functionality
@mixin MG-popin($settings: 0.5s, $name:popin, $growth:1.2 ){
	@if ($name == popin){
		@include kf-predefined(popin,$settings,1,ease-out);
	} @else {
		@include kf-animate($name, popin_generator($growth), $settings, 1);
	}
	.no-cssanimations & { opacity: 1; display: block; }
}


/*******************************************\
	PULSE EFFECT
---------------------------------------------
	Element periodically grows slightly and
	then shrinks again.
\*******************************************/

@function pulse_generator($scale, $stop1: 30%, $stop2: 50%){
	@return
		0% (scale: 1),
		$stop1 (scale: $scale),
		$stop2 (scale: 1),
		100% (scale: 1)
	;
}

$pulse: pulse_generator(1.1);

@include kf-definition(pulse,$pulse);

//////////////// Use the following //////////////////////////

//mixin for custom functionality
@mixin MG-pulse($name: pulse,$settings: 1s, $loops:infinite, $scale:1.1, $stop1: 30%, $stop2: 50%){
	@if ($name == pulse){
		@include kf-predefined(pulse,$settings,$loops);
	} @else {
		@include kf-animate($name, pulse_generator($scale, $stop1, $stop2), $settings, $loops);
	}
}



/*******************************************\
	RADAR PULSE EFFECT
---------------------------------------------
	Element fades out as it grows
\*******************************************/

@function radarPulse_generator($scale:1.4, $delayStop: 50%){
	$timeline: ();
	@if ($delayStop == 100%){
		$timeline:
			0% ( scale: 1, opacity: 1),
			100% ( scale: $scale, opacity: 0),
		;
	} @else {
		$timeline:
			0% ( scale: 1, opacity: 1),
			$delayStop ( scale: $scale, opacity: 0),
			100% ( scale: $scale, opacity: 0),
		;

	}
	@return $timeline;
}

$radarPulse: radarPulse_generator();

@include kf-definition(radarPulse,$radarPulse);

//////////////// Use the following //////////////////////////

@mixin MG-radarPulse($settings: 2s, $loops:infinite, $name: radarPulse, $scale:1.4,  $delayStop: 50%){
	@if ($name == radarPulse){
		@include kf-predefined(radarPulse,$settings,$loops);
	} @else {
		@include kf-animate($name, radarPulse_generator($scale, $delayStop), $settings, $loops);
	}
}


/*******************************************\
	BOB EFFECT
---------------------------------------------
	Element moves backwards and forwards
	@include MG-bob([animation name], [axis], [bob distance]);
\*******************************************/
@function bob_generator($axis, $value){
	@return
		(transform: unquote('translate#{to-upper-case($axis)}(0)')),
		(transform: unquote('translate#{to-upper-case($axis)}(#{$value})')),
		(transform: unquote('translate#{to-upper-case($axis)}(0)')),
	;
}
$bobs:
	bob--up Y -3px,
	bob--down Y 3px,
	bob--left X -3px,
	bob--right X 3px
;

@each $bob in $bobs {
	$name: nth($bob, 1);
	$axis: nth($bob, 2);
	$value: nth($bob, 3);

	@include kf-definition($name, bob_generator($axis, $value));
}

////////////// use this /////////////////////

@mixin MG-bob($instanceName: left, $settings: 1s, $loops:infinite, $axis: X, $value: 3px){

	$defaultBob: false;

	@each $bob in $bobs {
		$bobName: nth($bob, 1);
		@if($bobName == 'bob--#{$instanceName}'){
			@if (($axis!=X) and ($value != 3px)){
				@error "Do not use 'up', 'down', 'left' or 'right' as the first argument if setting custom values for '$axis' '$value' (the first argument is used as the animation name)";
			}
			$defaultBob: true;
			@include kf-predefined($bobName,$settings,$loops);
		}
	}
	@if ($defaultBob == false){
		@include kf-animate('bob--#{$instanceName}', bob_generator($axis, $value), $settings, $loops);
	}
}

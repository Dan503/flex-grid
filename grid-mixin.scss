//grid system mixin version

@import 'grid-settings';

@import 'grid-shared-mixins';

//make cells take up multiple columns worth of width
@mixin grid__cell--span($span, $totalCols, $important: ()){
	width: (percentage(1/$totalCols) * $span) $important;
}

@mixin grid(
	$cols: auto,
	$gutter: false,
	$hasInners: false,
	$innerFlex: false,//display:flex; on inners
	$vAlign: false,
	$align: false,
	$space: false,
	$wrap: auto,
	$MQs: true,
	$outerGutters: false,
	$cellSpan: false,
	$direction: row,
	$ieFloat: false,
	$mini: false
){
	box-sizing: border-box;
	list-style: none;
	margin: 0;
	padding: 0;
	border: 0 solid transparent;
	display: flex;
	align-content: stretch;

	@if (not $mini){
		min-width: 100%;
	}

	@if ($direction != row){
		flex-direction: $direction;
	}

	@if ($grid-break-points != false){
		@include mq(max, $grid-page-width){
			@if ($MQs and $wrap == auto){
				flex-wrap: wrap;
			}
		}
	}

	//outer gutters
	@if ($outerGutters != false){
		$possibleMargins: (
			true: margin,
			v: margin-top margin-bottom,
			h: margin-left margin-right,
		);
		@each $type, $margins in $possibleMargins {
			@each $margin in $margins {
				#{$margin}: 0;
			}
		}
	}

	@if($hasInners) {
		> * {
			display: flex;
			align-items: stretch;
			> * {
				display: if($innerFlex, flex, block);
				width: 100%;
			}
		}
	}

	//Unfortunately this is a necessity for IE compatibility
	@if ($wrap == true){
		@include ieFloat;
		flex-wrap: wrap;
	}

	//vertical alignment of cells
	@if ($vAlign){
		@if ($vAlign == 'center') {
			align-items: center;
		} @else if ($vAlign == 'top') {
			align-items: flex-start;
		} @else if ($vAlign == 'bottom') {
			align-items: flex-end;
		} @else {
			@warn 'invalid value for $vAlign: "#{$vAlign}". Valid values: top, center, bottom.'
		}
	}

	//quick access to left,center and right alignments
	@if ($align) {
		> * { flex-grow: 0; }

		@if ($align == 'left') {
			justify-content: flex-start;
		} @else if ($align == 'center') {
			justify-content: center;
		} @else if ($align == 'right') {
			justify-content: flex-end;
		} @else {
			@warn 'invalid value for $align: "#{$align}". Valid values: left, center, right.'
		}
	}

	//quick access to space-between and space-around
	@if ($space) {
		> * { flex-grow: 0; }

		@if ($space == 'between') {
			justify-content: space-between;
		} @else if ($space == 'around') {
			justify-content: space-around;
		} @else {
			@warn 'invalid value for $space: "#{$space}". Valid values: between, around.'
		}
	}

	//allows IE to use floats instead of display table without affecting modern browsers
	@if ($ieFloat) {
		@include M-ieFloat;
	}

	//tabular backup for IE9 and below
	.no-flexbox & {
		display: table;
		width: 100%;
		> * {
			display: table-cell;
			vertical-align: top;
			@if ($hasInners){
				> * { display: block; }
			}
		}

		@if ($vAlign){
			@if ($vAlign == 'top'){
				> * { vertical-align: top; }
			} @else if ($vAlign == 'center') {
				> * { vertical-align: middle; }
			} @else if ($vAlign == 'bottom') {
				> * { vertical-align: bottom; }
			}
		}

		@if($direction == column){
			display: block;
			&:after {
				content: '';
				display: block;
				clear: both;
			}

			> * {
				float: left;
				display: block;
				width: 100%;
			}
		}
	}

	//grid cell styling
	> * {
		box-sizing: border-box;
		min-width: 0%;
		max-width: 100%;
		display: if($hasInners, flex, block);
		padding: 0;
		margin: 0;
		background-clip: padding-box!important;
		border: 0 solid transparent;
		flex-grow: 1;

		//column widths
		@if(type-of($cols) == number){

			$columnWidth: percentage(1/$cols);
			$breaks: if(length($grid-bp-list) < $cols, false, nth($grid-bp-list, $cols));

			width: $columnWidth;

			//Applies the media queries for the break points
			@if($MQs) {
				@if ($breaks != false) {
					@each $V-breakData in $breaks {
						$BP-deviceWidth : nth($V-breakData, 1);
						$V-columnWidth : nth($V-breakData, 2);

						@include mq(max, $BP-deviceWidth){
							width: $V-columnWidth;
						}
					}
				}
			}
			@if ($wrap == true) {
				.no-flexwrap & {
					@if ($cols > 2) {
						&:nth-child(#{$cols}n+1) { clear: left; }
					}
				}
			}
		}
	}

	//grid--gutter-# styling
	@if ($gutter != false){
		> *, & {
			.lt-ie9 & { border-color: $grid-gutter-ie-fallback; }
		}

		@if (type-of($gutter) == 'list') {
			@each $value in $gutter {
				@if (length($value) > 1){
					$gutterSize: nth($value,1);
					$mediaQuery: nth($value,2);
					@include mq($mediaQuery){
						@include generate-gutters('mixin', $gutterSize, $outerGutters);
					}
				} @else {
					@include generate-gutters('mixin', $value, $outerGutters);
				}
			}
		} @else {
			@include generate-gutters('mixin', $gutter, $outerGutters);
		}
	}
}


//================================================*\
/*	GRID STYLING FILE						*/
//----------------------------------------------------
//	This file holds the code that generates the
//	classes for the grid system.
//
//	DO NOT EDIT THIS FILE UNLESS YOU REALLY KNOW
//	WHAT YOU'RE DOING!
//================================================*/

//Default settings
@import 'grid-settings';

$fullPrefix: if($grid-prefix != '', $grid-prefix+'-', '');

//switches IE (and other non-flexbox friendly browsers) to using float mode
@mixin M-ieFloat {
	.no-flexwrap & {
		display: block;
		&:after {
			content: '';
			display: block;
			clear: both;
		}
		& > .#{$fullPrefix}grid__cell {
			float: left;
			display: block;
		}
	}
}


//================================================*\
/*				GRID WIDTHS						*/
//----------------------------------------------------
//	Quickly and easily apply standard percentage
//	widths to grid cells based on fractions.
//
//	step 1: give container the width modifier class.
//			eg: grid--thirds
//	step 2: give extra wide grid span classes
//			eg. grid__cell--span2
//	WARNING: using a span class will likely require additional
//			 styling for tablets and smaller devices
//
//	EXAMPLE HTML:
//	<ul class="grid grid--cols-3">
//		<li class="grid__cell">Column is 1/3 wide on desktop</li>
//		<li class="grid__cell grid__cell--span-2">column is 2/3 wide on desktop</li>
//	</ul>
//================================================*/

$grid-bp-list: if(
	$grid-break-points == false,
	false false false false false false,
	$grid-break-points
);

@for $i from 1 through length($grid-bp-list) {
	$columnWidth: percentage(1/$i);
	$breaks: nth($grid-bp-list, $i);

//sets the default grid__cell widths
	.#{$fullPrefix}grid--cols-#{$i} {
		> .#{$fullPrefix}grid__cell {
			width: $columnWidth;

//.#{$fullPrefix}grid__cell--span-# styling
			@if ($i > 1){
				@for $x from 2 through $i {
					&--span-#{$x} { width: $columnWidth * $x; }
				}
			}
		}

//Applies the media queries for the break points
		&:not(.#{$fullPrefix}grid--disableMQs) {
			@if ($breaks != false) {
				@for $y from 1 through length($breaks) {
					$MQ-breakData : nth($breaks, $y);
					$MQ-screenWidth : nth($MQ-breakData, 1);
					$MQ-columnWidth : nth($MQ-breakData, 2);
					@include mq(max, $MQ-screenWidth){
						> .#{$fullPrefix}grid__cell { width: $MQ-columnWidth; }
					}
				}
			}
		}
		.no-flexbox &.#{$fullPrefix}grid--wrap > .#{$fullPrefix}grid__cell {
			@if ($i > 2) {
				&:nth-child(#{$i}n+1) { clear: left; }
			}
		}
	}
}

//base grid styling
.#{$fullPrefix}grid {
	@extend %noDots;
	min-width: 100%;
	border: 0 solid #000;
	display: flex!important;
	align-content: stretch;

//grid-wrap styling... really only necessary for use with grid--gutter-#
	&__wrapper {
		overflow: hidden;
	}

//base grid__cell styling
	&__cell {
		min-width: 0%;
		max-width: 100%;
		display: block;
		padding: 0;
		margin: 0;
		background-clip: padding-box!important;
		border: 0 solid transparent;
		flex-grow: 1;
		flex-shrink: 1;
		outline-color: #000;
		border-color: #000;

		&--vAlign {
			align-self: center;
		}

		&--align {
			&-left {
				justify-content: flex-start;
			}
			&-center {
				justify-content: center;
			}
			&-right {
				justify-content: flex-end;
			}
		}

		&.#{$fullPrefix}grid { display: flex; }
		&, * > {
			//helps fix IE10 word-wrap bug (elements need to not be display:inline for the fix to work though)
			max-width: 100%;
			flex-shrink: 1;
		}

		&--noGrowth {
			flex-grow: 0;
		}
		&--noShrink {
			flex-shrink: 0;
		}
		&--noResize {
			flex-shrink: 0;
			flex-grow: 0;
		}
	}

//base grid__inner styling
	&__inner { display: block; }

//grid--gutter-# styling
	&[class*="#{$fullPrefix}grid--gutter-"] {
		&.#{$fullPrefix}grid--outerGutters {
			margin: 0;
			&-v {
				margin-top: 0;
				margin-bottom: 0;
			}
			&-h {
				margin-left: 0;
				margin-right: 0;
			}
			&-top {
				margin-top: 0;
			}
			&-bottom {
				margin-bottom: 0;
			}
			&-left {
				margin-left: 0;
			}
			&-right {
				margin-right: 0;
			}
		}

		> .#{$fullPrefix}grid__cell, & {
			border-color: transparent;
			.lt-ie9 & { border-color: $grid-gutter-ie-fallback; }
		}
	}

	@mixin M-grid-cellGutter ($gutter){
		margin: -$gutter;
		border-width: $gutter 0 0 $gutter;
		> .#{$fullPrefix}grid__cell {
			border-width: 0 $gutter $gutter 0;
		}

		//only apply the outer horizontal gutters if the screen size is smaller than the page width + gutter size
		&.#{$fullPrefix}grid--outerGutters {
			@include mq(max, ($grid-page-width + $gutter)){
				&-h-delayed {
					margin-left: 0;
					margin-right: 0;
				}
				&-left-delayed {
					margin-left: 0;
				}
				&-right-delayed {
					margin-right: 0;
				}
			}
		}
	}

	@each $class, $gutter in $grid-cell-gutters {
		&--gutter-#{$class} {
			@if (type-of($gutter) == 'list') {
				@each $value in $gutter {
					@if (length($value) > 1){
						$gutterSize: nth($value,1);
						$mediaQuery: nth($value,2);
						@include mq($mediaQuery){
							@include M-grid-cellGutter($gutterSize);
						}
					} @else {
						@include M-grid-cellGutter($value);
					}
				}
			} @else {
				@include M-grid-cellGutter($gutter);
			}
		}
	}

	&--hasInners {
		> .#{$fullPrefix}grid__cell {
			display: flex;
			align-items: stretch;

			> .#{$fullPrefix}grid__inner {
				display: block;
				width: 100%;

				&.#{$fullPrefix}grid {
					display: flex;
				}
			}
		}
	}

//vertical alignment code
	&--vAlign {
		&:not(.#{$fullPrefix}grid--hasInners){
			> .#{$fullPrefix}grid__cell {
				display: flex;
				align-items: center;
			}
		}
		&.#{$fullPrefix}grid--hasInners {
			align-items: stretch;

			> .#{$fullPrefix}grid__cell > .#{$fullPrefix}grid__inner {
				display: flex;
				align-items: center;
			}
		}
		&-centered {
			&.#{$fullPrefix}grid--hasInners > .#{$fullPrefix}grid__cell > .#{$fullPrefix}grid__inner,
			&:not(.#{$fullPrefix}grid--hasInners) > .#{$fullPrefix}grid__cell {
				justify-content: center;
			}
		}
	}


	&--vertical {
		flex-direction: column;
	}

	&--noGrowth {
		> .#{$fullPrefix}grid__cell { flex-grow: 0; }
	}

	&--shrinkable {
		min-width: 0;
	}

	//allows columns to wrap after screen hits the edge of the design
	@include mq(max, $grid-page-width){
		flex-wrap: wrap;
	}

//Unfortunately this is a necessity for IE compatibility
//allows wrapping at all screen widths
	&--wrap {
		flex-wrap: wrap;
		@include M-ieFloat;
	}
//disables wrapping at all screen widths
	&--noWrap {
		flex-wrap: nowrap;
	}
	&--space {
		&-between, &-around {
			> .#{$fullPrefix}grid__cell { flex-grow: 0; }
		}
		&-between {
			justify-content: space-between;
		}
		&-around {
			justify-content: space-around;
		}
	}

	&--align {
		&-left, &-center, &-right {
			> .#{$fullPrefix}grid__cell { flex-grow: 0; }
		}
		&-left {
			justify-content: flex-start;
		}
		&-center {
			justify-content: center;
		}
		&-right {
			justify-content: flex-end;
		}
	}

//tabular backup for IE9 and below
	.no-flexbox & {
		display: table;
		width: 100%;
		> .#{$fullPrefix}grid__cell { display: table-cell; vertical-align: top; }

		&--vAlign > .#{$fullPrefix}grid__cell { vertical-align: middle; }
		&--vertical {
			display: block;
			@include MG-clearfix;
			& > .#{$fullPrefix}grid__cell {
				float: left;
				display: block;
				width: 100%;
			}
		}
	}

//allows IE to use floats instead of display table without affecting modern browsers
	&--ieFloat {
		@include M-ieFloat;
	}

}



